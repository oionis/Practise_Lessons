Generics (Обобщения)

Призваны для того, что бы решить проблему жёсткого определения типа. А так же, безопасности типов.
По своей сути, Generics это информация для компилятора. Под капотом, в байт коде, дженериков нет. Вместо них используется класс Object, так как он суппер класс, и все типы его наследуют.
Generic были созданы на замену, просто использованию Object для того, что бы обеспечить безопасность типов.
Дженерики, просто напросто не позволять скомпилировать программу, если будут использоваться несовместимые типы.


 ------------------------------- Bounds (ограничения Generic) -------------------------------

Иногда необходимо, чтобы параметр соответствовал только некоторому ограниченному набору типов. В этом случае применяются ограничения, которые позволяют указать базовый класс, которому должен соответствовать параметр.
Для установки ограничения - после Т, ставится слово extends и указывается базовый класс.
После, во время использования, на место параметра Т, можно передать либо сам класс который был указан, либо наследники этого класса.

Данные ограничения, позволяют использовать методы, класса, который "extends".

Помимо классов, можно указывать и интерфейсы (таким же способом).

Если неохбходимо использовать множественное наследование, то класс (он может быть только 1 и должен стоять первый) и интерфейсы записываются через символ "&"

Так же, не стоит забывать, что передаваемый класс или интерфейс на место Т, должен соответствовать всем параметрам указанным после слова extends

 ------------------------------- Wild Card -------------------------------

Super
При использовании выражения Super, с правой стороны от "=" можно использовать все классы Родители ( и тот же класс что слева),
того класса который находится слева. К примеру Object;

При использовании super, можно выполнять Set, всех Child`ов.
Использовать Get, нельзя (нещитая приведения типов, чего не рекомендуется делать).

Extends
При использовании выражения Extends, с правой стороны от "=" можно использовать все классы Наследники ( и тот же класс что слева),
того класса который находится слева.

Теперь можно использовать Get, но только (не считая приведения) тех классов, которые указаны в правой части инициализации переменной.
Использовать Set - нельзя